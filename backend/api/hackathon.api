syntax = "v1"

info (
	title:   "Hackathon API"
	desc:    "Hackathon backend API"
	author:  "hackathon team"
	version: "v1"
)

type (
	PingReq  {}
	PingResp {
		Message string `json:"message"` // 响应消息
	}
	// 裸金属机器信息
	Machine {
		Id           string `json:"id"`            // 机器唯一标识
		Name         string `json:"name"`          // 机器名称
		Ip           string `json:"ip"`            // IP地址
		Port         int    `json:"port"`          // SSH端口号
		Username     string `json:"username"`      // SSH用户名
		Password     string `json:"password"`      // SSH密码
		Description  string `json:"description"`   // 机器描述
		HealthStatus string `json:"health_status"` // 健康状态: healthy-健康, unhealthy-不健康
		ErrorStatus  string `json:"error_status"`  // 异常状态: normal-正常, error-异常
		AlertStatus  string `json:"alert_status"`  // 告警状态: normal-正常, alert-告警
		CreatedAt    int64  `json:"created_at"`    // 创建时间戳
		UpdatedAt    int64  `json:"updated_at"`    // 更新时间戳
	}
	// 应用信息
	Application {
		Id             string    `json:"id"`             // 应用唯一标识
		Name           string    `json:"name"`           // 应用名称
		DeployPath     string    `json:"deploy_path"`    // 部署路径
		StartCmd       string    `json:"start_cmd"`      // 启动命令
		StopCmd        string    `json:"stop_cmd"`       // 停止命令
		CurrentVersion string    `json:"currentVersion"` // 当前版本
		MachineCount   int       `json:"machine_count"`  // 机器总数量
		HealthCount    int       `json:"health_count"`   // 健康机器数量
		ErrorCount     int       `json:"error_count"`    // 异常机器数量
		AlertCount     int       `json:"alert_count"`    // 告警机器数量
		Machines       []Machine `json:"machines"`       // 机器列表
		CreatedAt      int64     `json:"created_at"`     // 创建时间戳
		UpdatedAt      int64     `json:"updated_at"`     // 更新时间戳
	}
	// 发布机器信息
	NodeDeployment {
		Id               string `json:"id"`                 // 机器唯一标识
		Ip               string `json:"ip"`                 // IP地址
		NodeDeployStatus string `json:"node_deploy_status"` // 发布状态: pending-待发布, deploying-发布中, success-成功, failed-失败
		ReleaseLog       string `json:"release_log"`        // 发布日志
	}
	// 发布记录信息
	Deployment {
		Id              string           `json:"id"`               // 发布记录唯一标识
		AppName         string           `json:"app_name"`         // 应用名称
		Status          string           `json:"status"`           // 发布状态: pending-待发布, deploying-发布中, success-成功, failed-失败, rolled_back-已回滚
		PackageVersion  string           `json:"package_version"`  // 包版本
		ConfigPath      string           `json:"config_path"`      // 配置文件路径
		GrayStrategy    string           `json:"gray_strategy"`    // 灰度策略: canary-金丝雀发布, blue-green-蓝绿发布, all-全量发布
		NodeDeployments []NodeDeployment `json:"node_deployments"` // 发布机器列表
		CreatedAt       int64            `json:"created_at"`       // 创建时间戳
		UpdatedAt       int64            `json:"updated_at"`       // 更新时间戳
	}
	// 应用相关请求响应
	CreateAppReq {
		Name       string `json:"name"`        // 应用名称
		DeployPath string `json:"deploy_path"` // 部署路径
		StartCmd   string `json:"start_cmd"`   // 启动命令
		StopCmd    string `json:"stop_cmd"`    // 停止命令
	}
	CreateAppResp {
		Id string `json:"id"` // 创建的应用ID
	}
	UpdateAppReq {
		Id         string   `json:"id"`          // 应用ID
		Name       string   `json:"name"`        // 应用名称
		DeployPath string   `json:"deploy_path"` // 部署路径
		StartCmd   string   `json:"start_cmd"`   // 启动命令
		StopCmd    string   `json:"stop_cmd"`    // 停止命令
		MachineIds []string `json:"machine_ids"` // 关联的机器ID列表
	}
	UpdateAppResp {
		Success bool `json:"success"` // 更新是否成功
	}
	GetAppListReq {
		Page     int    `form:"page,default=1"`       // 页码，默认第1页
		PageSize int    `form:"page_size,default=10"` // 每页数量，默认10条
		Name     string `form:"name,optional"`        // 应用名称筛选，可选
	}
	GetAppListResp {
		Apps     []Application `json:"apps"`      // 应用列表
		Total    int64         `json:"total"`     // 总数量
		Page     int           `json:"page"`      // 当前页码
		PageSize int           `json:"page_size"` // 每页数量
	}
	GetAppDetailReq {
		Id string `path:"id"` // 应用ID
	}
	GetAppDetailResp {
		Application Application `json:"application"` // 应用详情
	}
	// 发布记录相关请求响应
	CreateDeploymentReq {
		AppName        string `json:"app_name"`        // 应用名称
		PackageVersion string `json:"package_version"` // 包版本
		ConfigPath     string `json:"config_path"`     // 配置文件路径
		GrayStrategy   string `json:"gray_strategy"`   // 灰度策略
	}
	CreateDeploymentResp {
		Id string `json:"id"` // 创建的发布记录ID
	}
	UpdateDeploymentReq {
		Id             string `json:"id"`              // 发布记录ID
		AppName        string `json:"app_name"`        // 应用名称
		PackageVersion string `json:"package_version"` // 包版本
		ConfigPath     string `json:"config_path"`     // 配置文件路径
		GrayStrategy   string `json:"gray_strategy"`   // 灰度策略
	}
	UpdateDeploymentResp {
		Success bool `json:"success"` // 更新是否成功
	}
	GetDeploymentListReq {
		Page     int    `form:"page,default=1"`       // 页码，默认第1页
		PageSize int    `form:"page_size,default=10"` // 每页数量，默认10条
		AppName  string `form:"app_name,optional"`    // 应用名称筛选，可选
		Status   string `form:"status,optional"`      // 发布状态筛选，可选
	}
	GetDeploymentListResp {
		Deployments []Deployment `json:"deployments"` // 发布记录列表
		Total       int64        `json:"total"`       // 总数量
		Page        int          `json:"page"`        // 当前页码
		PageSize    int          `json:"page_size"`   // 每页数量
	}
	GetDeploymentDetailReq {
		Id string `path:"id"` // 发布记录ID
	}
	GetDeploymentDetailResp {
		Deployment Deployment `json:"deployment"` // 发布记录详情
	}
	CancelDeploymentReq {
		Id string `path:"id"` // 发布记录ID
	}
	CancelDeploymentResp {
		Success bool `json:"success"` // 取消是否成功
	}
	RollbackDeploymentReq {
		Id string `path:"id"` // 发布记录ID
	}
	RollbackDeploymentResp {
		Success bool `json:"success"` // 回滚是否成功
	}
	// 裸金属机器相关请求响应
	CreateMachineReq {
		Name        string `json:"name"`        // 机器名称
		Ip          string `json:"ip"`          // IP地址
		Port        int    `json:"port"`        // SSH端口号
		Username    string `json:"username"`    // SSH用户名
		Password    string `json:"password"`    // SSH密码
		Description string `json:"description"` // 机器描述
	}
	CreateMachineResp {
		Id string `json:"id"` // 创建的机器ID
	}
	UpdateMachineReq {
		Id          string `json:"id"`          // 机器ID
		Name        string `json:"name"`        // 机器名称
		Ip          string `json:"ip"`          // IP地址
		Port        int    `json:"port"`        // SSH端口号
		Username    string `json:"username"`    // SSH用户名
		Password    string `json:"password"`    // SSH密码
		Description string `json:"description"` // 机器描述
	}
	UpdateMachineResp {
		Success bool `json:"success"` // 更新是否成功
	}
	GetMachineListReq {
		Page         int    `form:"page,default=1"`         // 页码，默认第1页
		PageSize     int    `form:"page_size,default=10"`   // 每页数量，默认10条
		Name         string `form:"name,optional"`          // 机器名称筛选，可选
		Ip           string `form:"ip,optional"`            // IP地址筛选，可选
		HealthStatus string `form:"health_status,optional"` // 健康状态筛选，可选
		ErrorStatus  string `form:"error_status,optional"`  // 异常状态筛选，可选
		AlertStatus  string `form:"alert_status,optional"`  // 告警状态筛选，可选
	}
	GetMachineListResp {
		Machines []Machine `json:"machines"`  // 机器列表
		Total    int64     `json:"total"`     // 总数量
		Page     int       `json:"page"`      // 当前页码
		PageSize int       `json:"page_size"` // 每页数量
	}
	GetMachineDetailReq {
		Id string `path:"id"` // 机器ID
	}
	GetMachineDetailResp {
		Machine Machine `json:"machine"` // 机器详情
	}
	DeleteMachineReq {
		Id string `path:"id"` // 机器ID
	}
	DeleteMachineResp {
		Success bool `json:"success"` // 删除是否成功
	}
	TestMachineConnectionReq {
		Id string `path:"id"` // 机器ID
	}
	TestMachineConnectionResp {
		Success bool   `json:"success"` // 连接是否成功
		Message string `json:"message"` // 连接结果消息
	}
	PostAlertCallbackReq {
		Key          string            `json:"key"`
		Status       string            `json:"status"`
		Desc         string            `json:"desc,optional,omitempty"`
		StartsAt     string            `json:"startsAt"`
		ReceiveAt    string            `json:"receiveAt"`
		EndsAt       string            `json:"endsAt,optional,omitempty"`
		Severity     string            `json:"severity"`
		Alertname    string            `json:"alertname"`
		GeneratorURL string            `json:"generatorUrl"`
		NeedHandle   bool              `json:"needHandle,optional,omitempty"`
		IsEmergent   bool              `json:"isEmergent,optional,omitempty"`
		Labels       map[string]string `json:"labels,optional,omitempty"`
		Annotations  map[string]string `json:"annotations,optional,omitempty"` // 关键字看 description,节点访问中心成功率低于80% 当前触发值: 50%, 然后让 AI自动分析
		Type         int               `json:"type,,optional,omitempty"`
		Values       float64           `json:"values"`
	}
	RollbackNodeDeploymentReq {
		Id                string   `path:"id"`                  // 发布记录ID
		NodeDeploymentIds []string `json:"node_deployment_ids"` // 发布机器ID列表
	}
	RollbackNodeDeploymentResp {
		Success bool `json:"success"` // 回滚是否成功
	}
	DeployNodeDeploymentReq {
		Id                string   `path:"id"`                  // 发布记录ID
		NodeDeploymentIds []string `json:"node_deployment_ids"` // 发布机器ID列表
	}
	DeployNodeDeploymentResp {
		Success bool `json:"success"` // 发布是否成功
	}
	RetryNodeDeploymentReq {
		Id                string   `path:"id"`                  // 发布记录ID
		NodeDeploymentIds []string `json:"node_deployment_ids"` // 发布机器ID列表
	}
	RetryNodeDeploymentResp {
		Success bool `json:"success"` // 重试是否成功
	}
	SkipNodeDeploymentReq {
		Id                string   `path:"id"`                  // 发布记录ID
		NodeDeploymentIds []string `json:"node_deployment_ids"` // 发布机器ID列表
	}
	SkipNodeDeploymentResp {
		Success bool `json:"success"` // 跳过是否成功
	}
	CancelNodeDeploymentReq {
		Id                string   `path:"id"`                  // 发布记录ID
		NodeDeploymentIds []string `json:"node_deployment_ids"` // 发布机器ID列表
	}
	CancelNodeDeploymentResp {
		Success bool `json:"success"` // 取消是否成功
	}
	GetAppVersionsReq {
		AppName string `form:"app_name"` // 应用名称
	}
	GetAppVersionsResp {
		Versions []string `json:"versions"` // 版本列表，按降序排列
	}
)

service hackathon-api {
	@handler Ping
	get /ping (PingReq) returns (PingResp)
}

@server (
	group: apps
)
service hackathon-api {
	@doc "创建应用"
	@handler CreateApp
	post /api/v1/apps (CreateAppReq) returns (CreateAppResp)

	@doc "更新应用"
	@handler UpdateApp
	put /api/v1/apps/:id (UpdateAppReq) returns (UpdateAppResp)

	@doc "获取应用列表"
	@handler GetAppList
	get /api/v1/apps (GetAppListReq) returns (GetAppListResp)

	@doc "获取应用详情"
	@handler GetAppDetail
	get /api/v1/apps/:id (GetAppDetailReq) returns (GetAppDetailResp)

	@doc "获取应用可用版本列表"
	@handler GetAppVersions
	get /api/v1/apps/versions (GetAppVersionsReq) returns (GetAppVersionsResp)
}

@server (
	group: deployments
)
service hackathon-api {
	@doc "创建发布记录"
	@handler CreateDeployment
	post /api/v1/deployments (CreateDeploymentReq) returns (CreateDeploymentResp)

	@doc "更新发布记录"
	@handler UpdateDeployment
	put /api/v1/deployments/:id (UpdateDeploymentReq) returns (UpdateDeploymentResp)

	@doc "获取发布记录列表"
	@handler GetDeploymentList
	get /api/v1/deployments (GetDeploymentListReq) returns (GetDeploymentListResp)

	@doc "获取发布记录详情"
	@handler GetDeploymentDetail
	get /api/v1/deployments/:id (GetDeploymentDetailReq) returns (GetDeploymentDetailResp)

	@doc "取消发布"
	@handler CancelDeployment
	post /api/v1/deployments/:id/cancel (CancelDeploymentReq) returns (CancelDeploymentResp)

	@doc "回滚发布"
	@handler RollbackDeployment
	post /api/v1/deployments/:id/rollback (RollbackDeploymentReq) returns (RollbackDeploymentResp)

	@doc "回滚发布单设备"
	@handler RollbackNodeDeployment
	post /api/v1/deployments/:id/node-deployments/rollback (RollbackNodeDeploymentReq) returns (RollbackNodeDeploymentResp)

	@doc "发布指定设备"
	@handler DeployNodeDeployment
	post /api/v1/deployments/:id/node-deployments/deploy (DeployNodeDeploymentReq) returns (DeployNodeDeploymentResp)

	@doc "重试失败的设备"
	@handler RetryNodeDeployment
	post /api/v1/deployments/:id/node-deployments/retry (RetryNodeDeploymentReq) returns (RetryNodeDeploymentResp)

	@doc "跳过指定设备"
	@handler SkipNodeDeployment
	post /api/v1/deployments/:id/node-deployments/skip (SkipNodeDeploymentReq) returns (SkipNodeDeploymentResp)

	@doc "取消发布中的设备"
	@handler CancelNodeDeployment
	post /api/v1/deployments/:id/node-deployments/cancel (CancelNodeDeploymentReq) returns (CancelNodeDeploymentResp)
}

@server (
	group: machines
)
service hackathon-api {
	@doc "创建裸金属机器"
	@handler CreateMachine
	post /api/v1/machines (CreateMachineReq) returns (CreateMachineResp)

	@doc "更新裸金属机器"
	@handler UpdateMachine
	put /api/v1/machines/:id (UpdateMachineReq) returns (UpdateMachineResp)

	@doc "获取裸金属机器列表"
	@handler GetMachineList
	get /api/v1/machines (GetMachineListReq) returns (GetMachineListResp)

	@doc "获取裸金属机器详情"
	@handler GetMachineDetail
	get /api/v1/machines/:id (GetMachineDetailReq) returns (GetMachineDetailResp)

	@doc "删除裸金属机器"
	@handler DeleteMachine
	delete /api/v1/machines/:id (DeleteMachineReq) returns (DeleteMachineResp)

	@doc "测试机器连接"
	@handler TestMachineConnection
	post /api/v1/machines/:id/test (TestMachineConnectionReq) returns (TestMachineConnectionResp)
}

@server (
	group: alert
)
service hackathon-api {
	@doc "告警处理"
	@handler AlertCallBack
	post /v1/alerts (PostAlertCallbackReq)
}